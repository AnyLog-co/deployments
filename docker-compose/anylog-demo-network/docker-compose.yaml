version: "2.2"
services:
  postgres:
      image: postgres:14.0-alpine
      env_file:
        - envs/postgres.env
      container_name: postgres
      restart: always
      stdin_open: true
      tty: true
      ports:
        - "5432:5432"
      volumes:
        - pgdata:/var/lib/postgresql/data
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres" ]
        interval: 5s
        timeout: 5s
        retries: 5
  anylog-master:
    depends_on:
      postgres:
        condition: service_healthy
    image: anylogco/anylog-network:${TAG}
    env_file:
      - envs/anylog_master.env
    container_name: anylog-master
    restart: always
    stdin_open: true
    tty: true
    network_mode: "host"
    volumes:
      - anylog-master-anylog:/app/AnyLog-Network/anylog
      - anylog-master-blockchain:/app/AnyLog-Network/blockchain
      - anylog-master-data:/app/AnyLog-Network/data
      - anylog-master-local-scripts:/app/deployment-scripts
  anylog-query:
    depends_on:
      postgres:
        condition: service_healthy
    image: anylogco/anylog-network:${TAG}
    env_file:
      - envs/anylog_query.env
    container_name: anylog-query
    restart: always
    stdin_open: true
    tty: true
    network_mode: "host"
    volumes:
      - remote-cli-current:/app/Remote-CLI/djangoProject/static/blobs/current/
      - anylog-query-anylog:/app/AnyLog-Network/anylog
      - anylog-query-blockchain:/app/AnyLog-Network/blockchain
      - anylog-query-data:/app/AnyLog-Network/data
      - anylog-query-local-scripts:/app/deployment-scripts
  anylog-operator1:
    depends_on:
      postgres:
        condition: service_healthy
    image: anylogco/anylog-network:${TAG}
    env_file:
      - envs/anylog_operator1.env
    container_name: anylog-operator1
    restart: always
    stdin_open: true
    tty: true
    network_mode: "host"
    volumes:
      - anylog-operator1-anylog:/app/AnyLog-Network/anylog
      - anylog-operator1-blockchain:/app/AnyLog-Network/blockchain
      - anylog-operator1-data:/app/AnyLog-Network/data
      - anylog-operator1-local-scripts:/app/deployment-scripts
  anylog-operator2:
    depends_on:
      postgres:
        condition: service_healthy
    image: anylogco/anylog-network:${TAG}
    env_file:
      - envs/anylog_operator2.env
    container_name: anylog-operator2
    restart: always
    stdin_open: true
    tty: true
    network_mode: "host"
    volumes:
      - anylog-operator2-anylog:/app/AnyLog-Network/anylog
      - anylog-operator2-blockchain:/app/AnyLog-Network/blockchain
      - anylog-operator2-data:/app/AnyLog-Network/data
      - anylog-operator2-local-scripts:/app/deployment-scripts
  remote-cli:
    image: anylogco/remote-cli:latest
    container_name: remote-cli
    restart: always
    stdin_open: true
    tty: true
    network_mode: "host" 
    env_file:
      - envs/remote_cli.env
    volumes:
      - remote-cli:/app/Remote-CLI/djangoProject/static/json
      - remote-cli-current:/app/Remote-CLI/djangoProject/static/blobs/current/
  grafana:
    image: grafana/grafana:7.5.7
    env_file:
      - envs/grafana.env
    container_name: grafana
    restart: always
    stdin_open: true
    tty: true
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-log:/var/log/grafana
      - grafana-config:/etc/grafana
volumes:
  pgdata:
  remote-cli:
  remote-cli-current:
  grafana-data:
  grafana-log:
  grafana-config:
  anylog-master-anylog:
  anylog-master-blockchain:
  anylog-master-data:
  anylog-master-local-scripts:
  anylog-query-anylog:
  anylog-query-blockchain:
  anylog-query-data:
  anylog-query-local-scripts:
  anylog-operator1-anylog:
  anylog-operator1-blockchain:
  anylog-operator1-data:
  anylog-operator1-local-scripts:
  anylog-operator2-anylog:
  anylog-operator2-blockchain:
  anylog-operator2-data:
  anylog-operator2-local-scripts:
