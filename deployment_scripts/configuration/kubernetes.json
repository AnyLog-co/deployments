{
  "general":  {
    "namespace": {
      "default": "default",
      "description": "namespace node seats in"
    },
    "app_name": {
      "default": "anylog",
      "description": "Application name"
    },
    "pod_name": {
      "default": "anylog-pod",
      "description": "Kubernetes pod name"
    },
    "deployment_name": {
      "default": "anylog-app",
      "description": "Kubernetes deployment name"
    },
    "service_name": {
      "default": "anylog-svs",
      "description": "Kubernetes service name"
    },
    "configmap_name": {
      "default": "anylog-configs",
      "description": "Kubernetes configuration for deployment"
    },
    "nodeSelector": {
      "default": "",
      "description": "Allows running Kubernetes remotely. If commented out, code will ignore it"
    },
    "replicas": {
      "default": 1,
      "description": "Number of deployment replicas"
    }
  },
  "image": {
    "secretName": {
      "default": "imagepullsecret",
      "description": "AnyLog login credentials as a Kubernetes secret"
    },
    "repository": {
      "default": "anylogco/anylog-network",
      "description": "Docker repository"
    },
    "tag": {
      "default": "develop",
      "options": ["develop", "predevelop", "test"],
      "description": "Docker build version"
    },
    "pullPolicy": {
      "default": "IfNotPresent",
      "options": ["IfNotPresent", "Always"],
      "description": "Kubernetes docker image pull policy"
    }
  },
  "configs": {
    "basic": {
      "node_type": {
        "default": "rest",
        "options": [
          "rest",
          "master",
          "operator",
          "query",
          "publisher"
        ],
        "description": "Deployment node type"
      },
      "node_name": {
        "default": "anylog-operator-node1",
        "value": "",
        "description": "Unique name for the AnyLog node"
      },
      "company_name": {
        "default": "New Company",
        "value": "",
        "description": "Company owner of the node"
      },
      "location": {
        "default": "0.0, 0.0",
        "value": "",
        "description": "Physical location of the node"
      },
      "country": {
        "default": "Unknown",
        "value": "",
        "description": "Country node is located in"
      },
      "state": {
        "default": "Unknown",
        "value": "",
        "description": "State node is located in"
      },
      "city": {
        "default": "Unknown",
        "value": "",
        "description": "City node is located in"
      }
    },
    "networking": {
      "server": {
        "default": 32548,
        "value": "",
        "range": [
          30000,
          32767
        ],
        "description": "Port for TCP communication between nodes"
      },
      "rest": {
        "default": 32549,
        "value": "",
        "range": [
          30000,
          32767
        ],
        "description": "Port for REST communication with the node"
      },
      "broker": {
        "default": "",
        "value": "",
        "range": [
          30000,
          32767
        ],
        "description": "Message Broker Port for the node"
      },
      "external_ip": {
        "default": "",
        "description": "External Network IP address"
      },
      "local_ip": {
        "default": "",
        "description": "Local IP of the machine - if running on Kubernetes this value will be set as the Proxy IP"
      },
      "k8s_proxy_ip": {
        "default": "",
        "value": "",
        "description": "Proxy IP used by Nginx or other loadbalancer"
      }
    },
    "blockchain": {
    "ledger_conn": {
      "default": "45.79.74.39:32048",
      "value": "",
      "description": "Blockchain ledger TCP connection information"
    },
    "sync_time": {
      "default": "30 seconds",
      "value": "",
      "options": ["seconds", "minute", "hour", "day"],
      "description": "How often to sync against the blockchain"
    },
    "source": {
      "default": "master",
      "value": "",
      "options": ["blockchain", "master"],
      "description": "Source of where the data is coming from"
    },
    "destination": {
      "default": "file",
      "value": "",
      "options": [
        "file",
        "dbms"
      ],
      "description": "Where will the copy of the blockchain be stored"
    }
  },
    "database": {
      "type": {
        "default": "psql",
        "value": "",
        "options": [
          "psql",
          "sqlite"
        ],
        "description": "Physical database type"
      },
      "ip": {
        "default": "127.0.0.1",
        "value": "",
        "description": "Physical database IP address"
      },
      "port": {
        "default": 5432,
        "default": "",
        "description": "Physical database port"
      },
      "user": {
        "default": "admin",
        "value": "",
        "description": "Database user"
      },
      "password": {
        "default": "demo",
        "value": "",
        "description": "Password correlated to database user"
      },
      "deploy_system_query": {
        "default": false,
        "value": "",
        "options": [
          true,
          false
        ],
        "description": "Whether to automatically deploy system_query logical database on node - enabled by default on Query node"
      },
      "memory": {
        "default": true,
        "value": "",
        "options": [
          true,
          false
        ],
        "description": "Run system_query logical database in memory"
      }
    },
    "operator": {
      "cluster_name": {
        "default": "new-cluster",
        "value": "",
        "description": "Name of the cluster operator will be associated with"
      },
      "db_name": {
        "default": "test",
        "value": "",
        "description": "Logical database to store data coming into operator node"
      },
      "partition": {
        "enable": {
          "default": true,
          "value": "",
          "options": [
            true,
            false
          ],
          "description": "whether or not to partition data on node"
        },
        "table": {
          "default": "*",
          "value": "",
          "description": "table(s) to partition (default - all tables)"
        },
        "column": {
          "default": "insert_timestamp",
          "value": "",
          "description": "Timestamp column to partition by"
        },
        "interval": {
          "default": "14 days",
          "value": "",
          "options": [
            "year",
            "month",
            "week",
            "day"
          ],
          "description": "Amount of time to partition by"
        },
        "keep": {
          "default": 6,
          "value": "",
          "description": "Number of partitioned tables to keep"
        },
        "sync": {
          "default": "1 day",
          "value": "",
          "options": [
            "year",
            "month",
            "week",
            "day"
          ],
          "description": "How often to check / remove old paritions"
        }
      },
      "member": {
        "default": "",
        "description": "Operator member ID - by default it's autogenerated, should be set only when resetting blockchain, but want to keep exactly the same information"
      },
      "create_table": {
        "default": true,
        "options": [true, false],
        "description": "creates a table if the table doesn't exists"
      },
      "update_tsd": {
        "default": true,
        "options": [true, false],
        "description": "update a summary table (tsd_info table in almgm dbms) with status of files ingested. (by default, almgm database & tsd_info table get created on all operator nodes)"
      },
      "archive": {
        "default": true,
        "options": [true, false],
        "description": "move JSON files to archives"
      },
      "distributor": {
        "default": true,
        "options": [true, false],
        "description": "Transfer data files to members of the cluster"
      }
    },
    "publisher": {
      "compress": {
        "default": true,
        "options": [true, false],
        "description": "Compress archived JSON files"
      },
      "move": {
        "default": true,
        "options": [true, false],
        "description": "Backup JSON files in publisher after distributing them to operator node(s)"
      },
      "db_location": {
        "default": "file_name[0]",
        "description": "In JSON file name, the location of the logical database to store file in (ex. [db_name].[file_name].0.json)"
      },
      "table_location": {
        "default": "file_name[1]",
        "description": "In JSON file name, the location of the logical table name to store data in (ex. [db_name].[file_name].0.json)"
      }
    },
    "mqtt": {
      "enable_mqtt": {
        "default": false,
        "value": "",
        "options": [true, false],
        "description": "Whether or not to enable MQTT client process"
      },
      "broker": {
        "default": "driver.cloudmqtt.com",
        "value": "",
        "description": "MQTT broker address"
      },
      "port": {
        "default": 18785,
        "value": "",
        "description": "Port correlated to MQTT user"
      },
      "user": {
        "default": "ibglowct",
        "value": "",
        "description": "Set MQTT user"
      },
      "password": {
        "default": "MSY4e009J7ts",
        "value": "",
        "description": "Password correlated to MQTT user"
      },
      "log": {
        "default": false,
        "value": "",
        "options": [true, false],
        "description": "Whether or not to output the broekr log messages to screen"
      },
      "topic": {
        "name": {
          "default": "anylogedgex",
          "value": "",
          "description": "MQTT topic name"
        },
        "db_name": {
          "default": "test",
          "value": "",
          "description": "Logical database to store data coming from MQTT client"
        },
        "table": {
          "default": "rand_data",
          "value": "",
          "description": "Physical table to store data in"
        },
        "timestamp": {
          "default": "now",
          "value": "",
          "description": "timestamp column"
        },
        "value_type": {
          "default": "float",
          "value": "",
          "options": [
            "str",
            "int",
            "float",
            "timestamp",
            "bool"
          ],
          "description": "Data-type for non-timestamp column"
        },
        "value": {
          "default": "bring readings[][value]",
          "value": "",
          "description": "How to extract value from data coming in"
        }
      }
    },
    "other": {
      "deploy_local_script": {
        "default": false,
        "value": "",
        "options": [
          true,
          false
        ],
        "description": "Deploy user created script"
      },
      "tcp_thread_pool": {
        "default": 6,
        "description": "number of workers threads that process requests which are send to the provided IP and Port."
      },
      "rest_timeout": {
        "default": 30,
        "description": "Amount of time (in seconds) until REST timeout"
      },
      "rest_threads": {
        "default": 5,
        "description": "The number of concurrent threads supporting HTTP requests."
      },
      "operator_pool": {
        "default": 3,
        "description": "Sets the number of threads supporting queries (the default is 3)."
      },
      "write_immediate": {
        "default": true,
        "options": [
          true,
          false
        ],
        "description": "Local database is immediate (independent of the calls to flush)"
      },
      "threshold_time": {
        "default": "60 seconds",
        "options": [
          "minute",
          "seconds",
          "second"
        ],
        "description": "The time threshold to flush the streaming data"
      },
      "threshold size": {
        "default": "10KB",
        "options": [
          "KB",
          "MB",
          "GB"
        ],
        "description": "The accumulated data volume that calls the data flush process"
      }
    }
  }
}
