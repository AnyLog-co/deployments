{
  "general": {
    "NODE_TYPE": {
      "default": "rest",
      "options": ["rest", "master", "operator", "query", "publisher"],
      "description": "Deployment node type"
    },
    "NODE_NAME": {
      "default": "anylog-node",
      "value": "",
      "description": "Unique name for the AnyLog node"
    },
    "COMPANY_NAME": {
      "default": "New Company",
      "value": "",
      "description": "Company owner of the node"
    },
    "LOCATION": {
      "default": "0.0, 0.0",
      "value": "",
      "description": "Physical location of the node"
    },
    "COUNTRY": {
      "default": "Unknown",
      "value": "",
      "description": "Country node is located in"
    },
    "STATE": {
      "default": "Unknown",
      "value": "",
      "description": "State node is located in"
    },
    "CITY": {
      "default": "Unknown",
      "value": "",
      "description": "City node is located in"
    }
  },
  "networking": {
    "ANYLOG_SERVER_PORT": {
      "default": 32548,
      "value": "",
      "range": [30000, 32767],
      "description": "Port for TCP communication between nodes"
    },
    "ANYLOG_REST_PORT": {
      "default": 32549,
      "value": "",
      "range": [30000, 32767],
      "description": "Port for REST communication with the node"
    },
    "ANYLOG_BROKER_PORT": {
      "default": "",
      "value": "",
      "range": [30000, 32767],
      "description": "Message Broker Port for the node"
    },
    "EXTERNAL_IP": {
      "default": "",
      "description": "External Network IP address"
    },
    "LOCAL_IP": {
      "default": "",
      "description": "Local IP of the machine - if running on Kubernetes this value will be set as the Proxy IP"
    }
  },
  "blockchain": {
    "LEDGER_CONN": {
      "default": "45.79.74.39:32048",
      "value": "",
      "description": "Blockchain ledger TCP connection information"
    },
    "SYNC_TIME": {
      "default": "30 seconds",
      "value": "",
      "options": ["seconds", "minute", "hour", "day"],
      "description": "How often to sync against the blockchain"
    },
    "SOURCE": {
      "default": "master",
      "options": ["blockchain", "master"],
      "description": "Source of where the data is coming from"
    },
    "DESTINATION": {
      "default": "file",
      "options": ["file", "dbms"],
      "description": "Where will the copy of the blockchain be stored"
    }
  },
  "database": {
    "DB_TYPE": {
      "default": "psql",
      "value": "",
      "options": [
        "psql",
        "sqlite"
      ],
      "description": "Physical database type"
    },
    "DB_IP": {
      "default": "127.0.0.1",
      "value": "",
      "description": "Physical database IP address"
    },
    "DB_PORT": {
      "default": 5432,
      "default": "",
      "description": "Physical database port"
    },
    "DB_USER": {
      "default": "admin",
      "value": "",
      "description": "Database user"
    },
    "DB_PASSWD": {
      "default": "demo",
      "value": "",
      "description": "Password correlated to database user"
    },
    "DEPLOY_SYSTEM_QUERY": {
      "default": false,
      "value": "",
      "options": [
        true,
        false
      ],
      "description": "Whether to automatically deploy system_query logical database on node - enabled by default on Query node"
    },
    "MEMORY": {
      "default": true,
      "value": "",
      "options": [
        true,
        false
      ],
      "description": "Run system_query logical database in memory"
    }
  },
  "operator": {
    "CLUSTER_NAME": {
      "default": "new-cluster",
      "value": "",
      "description": "Name of the cluster operator will be associated with"
    },
    "DATABASE_NAME": {
      "default": "test",
      "value": "",
      "description": "Logical database to store data coming into operator node"
    },
    "ENABLE_PARTITIONS": {
      "default": true,
      "value": "",
      "options": [
        true,
        false
      ],
      "description": "whether or not to partition data on node"
    },
    "PARTITION_TABLE": {
      "default": "*",
      "value": "",
      "description": "table(s) to partition (default - all tables)"
    },
    "PARTITION_COLUMN": {
      "default": "insert_timestamp",
      "value": "",
      "description": "Timestamp column to partition by"
    },
    "PARTITION_INTERVAL": {
      "default": "14 days",
      "value": "",
      "options": [
        "year",
        "month",
        "week",
        "day"
      ],
      "description": "Amount of time to partition by"
    },
    "PARTITION_KEEP": {
      "default": 6,
      "value": "",
      "description": "Number of partitioned tables to keep"
    },
    "PARTITION_SYNC": {
      "default": "1 day",
      "value": "",
      "options": [
        "year",
        "month",
        "week",
        "day"
      ],
      "description": "How often to check / remove old paritions"
    },
    "MEMBER": {
      "default": "",
      "description": "Operator member ID - by default it's autogenerated, should be set only when resetting blockchain, but want to keep exactly the same information"
    },
    "CREATE_TABLE": {
      "default": true,
      "options": [true, false],
      "description": "creates a table if the table doesn't exists"
    },
    "UPDATE_TSD": {
      "default": true,
      "options": [true, false],
      "description": "update a summary table (tsd_info table in almgm dbms) with status of files ingested. (by default, almgm database & tsd_info table get created on all operator nodes)"
    },
    "ARCHIVE": {
      "default": true,
      "options": [true, false],
      "description": "move JSON files to archives"
    },
    "DISTRIBUTOR": {
      "default": true,
      "options": [true, false],
      "description": "Transfer data files to members of the cluster"
    }
  },
  "publisher": {
    "COMPRESS_JSON": {
      "default": true,
      "options": [true, false],
      "description": "Compress archived JSON files"
    },
    "MOVE_JSON": {
      "default": true,
      "options": [true, false],
      "description": "Backup JSON files in publisher after distributing them to operator node(s)"
    },
    "DB_LOCATION": {
      "default": "file_name[0]",
      "description": "In JSON file name, the location of the logical database to store file in (ex. [db_name].[file_name].0.json)"
    },
    "TABLE_LOCATION": {
      "default": "file_name[1]",
      "description": "In JSON file name, the location of the logical table name to store data in (ex. [db_name].[file_name].0.json)"
    }
  },
  "mqtt": {
    "ENABLE_MQTT": {
      "default": false,
      "value": "",
      "options": [true, false],
      "description": "Whether or not to enable MQTT client process"
    },
    "BROKER": {
      "default": "driver.cloudmqtt.com",
      "value": "",
      "description": "MQTT broker address"
    },
    "MQTT_PORT": {
      "default": 18785,
      "value": "",
      "description": "Port correlated to MQTT user"
    },
    "MQTT_USER": {
      "default": "ibglowct",
      "value": "",
      "description": "Set MQTT user"
    },
    "MQTT_PASSWORD": {
      "default": "MSY4e009J7ts",
      "value": "",
      "description": "Password correlated to MQTT user"
    },
    "MQTT_LOG": {
      "default": false,
      "value": "",
      "options": [true, false],
      "description": "Whether or not to output the broekr log messages to screen"
    },
    "MQTT_TOPIC_NAME": {
      "default": "anylogedgex",
      "value": "",
      "description": "MQTT topic name"
    },
    "MQTT_TOPIC_DBMS": {
      "default": "test",
      "value": "",
      "description": "Logical database to store data coming from MQTT client"
    },
    "MQTT_TABLE_NAME": {
      "default": "rand_data",
      "value": "",
      "description": "Physical table to store data in"
    },
    "MQTT_TOPIC_TIMESTAMP": {
      "default": "now",
      "value": "",
      "description": "timestamp column"
    },
    "MQTT_COLUMN_VALUE_TYPE": {
      "default": "float",
      "value": "",
      "options": ["str", "int", "float", "timestamp", "bool"],
      "description": "Data-type for non-timestamp column"
    },
    "MQTT_COLUMN_VALUE": {
      "default": "bring readings[][value]",
      "value": "",
      "description": "How to extract value from data coming in"
    }
  },
  "other": {
    "DEPLOY_LOCAL_SCRIPT": {
      "default": false,
      "value": "",
      "options": [true, false],
      "description": "Deploy user created script"
    },
    "TCP_THREAD_POOL": {
      "default": 6,
      "description": "number of workers threads that process requests which are send to the provided IP and Port."
    },
    "REST_TIMEOUT": {
      "default": 30,
      "description": "Amount of time (in seconds) until REST timeout"
    },
    "REST_THREADS":{
      "default": 5,
      "description": "The number of concurrent threads supporting HTTP requests."
    },
    "OPERATOR_POOL": {
      "default": 3,
      "description": "Sets the number of threads supporting queries (the default is 3)."
    },
    "WRITE_IMMEDIATE": {
      "default": true,
      "options": [true, false],
      "description": "Local database is immediate (independent of the calls to flush)"
    },
    "THRESHOLD_TIME":{
      "default": "60 seconds",
      "options": ["minute", "seconds", "second"],
      "description": "The time threshold to flush the streaming data"
    },
    "Threshold Size": {
      "default": "10KB",
      "options": ["KB", "MB", "GB"],
      "description": "The accumulated data volume that calls the data flush process"
    }
  }
}
