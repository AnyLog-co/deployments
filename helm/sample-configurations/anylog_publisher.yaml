metadata: 
  # Kubernetes Instance namespace
  namespace: default
  # hostname for deployment
  hostname: anylog-publisher
  # deployment application name
  app_name: anylog-publisher-deployment
  # Pod application name
  pod_name: anylog-publisher-pod
  # Kubernetes deployment name
  deployment_name: anylog-node-deployment
  # Kubernetes service name
  service_name: anylog-publisher-svs
  # Kubernetes configuration mapping name
  configmap_name: anylog-publisher-configs
  # Allows running Kubernetes remotely. If commented out, code will ignore it
  node_selector: 
  # Number of Kubernetes replicas
  replicas: 1

image: 
  # Image secret naming
  secret_name: imagepullsecret
  # (Docker Hub) Image Path
  repository: anylogco/anylog-network
  # Image version
  tag: predevelop
  # Image pulling policy
  pull_policy: IfNotPresent

volume: 
  # Whether or not to enable volumes for AnyLog
  enable_volume: true
  anylog_volume:
    # AnyLog Volume name
    name: anylog-publisher-anylog-volume
    # AnyLog security directory path
    path: /app/AnyLog-Network/anylog
    # Volume access mode
    access_mode: ReadWRiteOnce
    # Volume storage size
    storage_size: 1Gi
  blockchain_volume:
    # AnyLog Volume name
    name: anylog-publisher-blockchain-volume
    # AnyLog security directory path
    path: /app/AnyLog-Network/blockchain
    # Volume access mode
    access_mode: ReadWRiteOnce
    # Volume storage size
    storage_size: 1Gi
  data_volume:
    # AnyLog Volume name
    name: anylog-publisher-data-volume
    # AnyLog security directory path
    path: /app/AnyLog-Network/data
    # Volume access mode
    access_mode: ReadWRiteOnce
    # Volume storage size
    storage_size: 1Gi


general:
  # Information regarding which AnyLog node configurations to enable. By default, even if everything is disabled, AnyLog starts TCP and REST connection protocols
  NODE_TYPE: publisher
  # Name of the AnyLog instance
  NODE_NAME: anylog-publisher
  # Owner of the AnyLog instance
  COMPANY_NAME: New Company
  # Coordinates of the machine - used by Grafana to map the network
  LOCATION: ""
  # Country where machine is located
  COUNTRY: ""
  # State where machine is located
  STATE: ""
  # City where machine is located
  CITY: ""

networking:
  # External IP address of the machine
  EXTERNAL_IP: ""
  # Local or  internal network IP address of the machine
  LOCAL_IP: ""
  # Configurable (local) IP address that can be used when behind a proxy, or using Kubernetes for static IP
  PROXY_IP: ""
  # Port address used by AnyLog's TCP protocol to communicate with other nodes in the network
  ANYLOG_SERVER_PORT: 32248
  # Port address used by AnyLog's REST protocol
  ANYLOG_REST_PORT: 32249
  # Port value to be used as an MQTT borker, or some other third-party broker
  ANYLOG_BROKER_PORT: ""

database:
  # Physical database type
  DB_TYPE: sqlite
  # Username for SQL database connection
  DB_USER: ""
  # Password correlated to database user
  DB_PASSWD: ""
  # Database IP address
  DB_IP: 127.0.0.1
  # Database port number
  DB_PORT: 5432
  # Whether to set autocommit data
  AUTOCOMMIT: false
  # Whether to start to start system_query logical database
  SYSTEM_QUERY: false
  # Run system_query using in-memory SQLite. If set to false, will use pre-set database type
  MEMORY: False
  # Whether to enable NoSQL logical database
  NOSQL_ENABLE: false
  # Physical database type
  NOSQL_TYPE: mongo
  # Username for SQL database connection
  NOSQL_USER: ""
  # Password correlated to database user
  NOSQL_PASSWD: ""
  # Database IP address
  NOSQL_IP: 127.0.0.1
  # Database port number
  NOSQL_PORT: 27017
  # Store blobs in database
  NOSQL_BLOBS_DBMS: true
  # Store blobs in folder
  NOSQL_BLOBS_FOLDER: true
  # Compress stored blobs
  NOSQL_BLOBS_COMPRESS: false
  # Whether (re)store a blob if already exists
  NOSQL_BLOBS_REUSE: true

blockchain:
  # TCP connection information for Master Node
  LEDGER_CONN: 127.0.0.1:32048
  # How often to sync from blockchain
  SYNC_TIME: 30 second
  # Source of where the data is coming from
  BLOCKCHAIN_SOURCE: master
  # Where will the copy of the blockchain be stored
  BLOCKCHAIN_DESTINATION: file

operator:
  # Operator ID
  MEMBER: ""
  # Owner of the cluster
  CLUSTER_NAME: new-company-cluster
  # Logical database name
  DEFAULT_DBMS: test
  # Whether of not to enable HA against the cluster
  ENABLE_HA: false
  # How many days back to sync between nodes
  START_DATE: 30
  # Whether to enable partitioning
  ENABLE_PARTITIONS: false
  # Which tables to partition
  TABLE_NAME: *
  # Which timestamp column to partition by
  PARTITION_COLUMN: insert_timestamp
  # Time period to partition by
  PARTITION_INTERVAL: 14 days
  # How many partitions to keep
  PARTITION_KEEP: 6
  # How often to check if an old partition should be removed
  PARTITION_SYNC: 1 day
  # Whether to create a new table in the operator
  CREATE_TABLE: true
  # Record data inserted on Operator
  UPDAE_TSD_INFO: true
  # Archive data coming in
  ARCHIVE: true
  # Compress JSON and SQL file(s) backup
  COMPRESS_FILE: true
  # How many threads to use in the operator process

  OPERATOR_THREADS: 1

publisher:
  # Location of logical database name within file name
  DBMS_FILE_LOCATION: file_name[0]
  # Location of table name within file name
  TABLE_FILE_LOCATION: file_name[1]
  # Compress JSON and SQL file(s) backup
  PUBLISHER_COMPRESS_FILE: true

mqtt:
  # Whether to enable the default MQTT process
  ENABLE_MQTT: false
  # Whether to enable MQTT logging process
  MQTT_LOG: false
  # IP address of MQTT broker
  MQTT_BROKER: driver.cloudmqtt.com
  # Port associated with MQTT broker
  MQTT_PORT: 18785
  # User associated with MQTT broker
  MQTT_USER: ibglowct
  # Password associated with MQTT user
  MQTT_PASSWD: MSY4e009J7ts
  # Topic to get data for
  MQTT_TOPIC: anylogedgex
  # Logical database name
  MQTT_DBMS: ""
  # Table where to store data
  MQTT_TABLE: rand_data
  # Timestamp column name
  MQTT_TIMESTAMP_COLUMN: now
  # Value column name
  MQTT_VALUE_COLUMN: bring [readings][][value]
  # Column value type
  MQTT_VALUE_COLUMN_TYPE: float

advanced_settings:
  # Whether to automatically run a local (or personalized) script at the end of the process
  DEPLOY_LOCAL_SCRIPT: false
  # Number of TCP threads
  TCP_THREAD_POOL: 6
  # How long to wait until REST timeout
  REST_TIMEOUT: 30
  # Number of REST threads
  REST_THREADS: 5
  # Number of parallel queries
  QUERY_POOL: 3
  # When data comes in write to database immidiately, as opposed to waiting for a full buffer
  WRITE_IMMEDIATE: true
  # If buffer is not full, how long to wait until pushing data through
  THRESHOLD_TIME: 60 seconds
  # Buffer size to reach, at which point data is pushed through
  THRESHOLD_VOLUME: 10KB
