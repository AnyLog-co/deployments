apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: '{{ .Values.general.namespace }}'
  name: '{{ .Values.general.deployment_name }}'
  labels:
    app: '{{ .Values.general.app_name }}'
spec:
  replicas: {{ .Values.general.replicas }}
  selector:
    matchLabels:
      app: '{{ .Values.general.app_name }}'
  template:
    metadata:
      name: '{{ .Values.general.deployment_name }}'
      labels:
        app: {{ .Values.general.app_name }}
    spec:
      containers:
      - name: '{{ .Values.general.deployment_name }}'
        image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
        envFrom:
          - configMapRef:
              name: '{{ .Values.general.configmap_name }}'
        ports:
        - name: '{{ .Values.networking.port_name }}'
          containerPort: 3000
        volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: false
      volumes:
        - name: grafana-storage
          emptyDir: { }
        - name: grafana-datasources
          configMap:
            defaultMode: 420
            name: grafana-datasources


