apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: '{{ .Values.general.namespace }}'
  name: '{{ .Values.general.deployment_name }}'
  labels:
    app: '{{ .Values.general.app_name }}'
spec:
  replicas: {{ .Values.general.replicas }}
  selector:
    matchLabels:
      app: '{{ .Values.general.app_name }}'
  template:
    metadata:
      name: '{{ .Values.general.deployment_name }}'
      labels:
        app: {{ .Values.general.app_name }}
    spec:
      containers:
      - name: '{{ .Values.general.deployment_name }}'
        image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
        envFrom:
          - configMapRef:
              name: '{{ .Values.general.configmap_name }}'
        ports:
        - name: '{{ .Values.networking.port_name }}'
          containerPort: 3000
#        {{- if eq .Values.general.enable_volume true }}
#        volumeMounts:
#          - mountPath: /etc/grafana
#            name: {{ .Values.general.volume_name }}-config
#            mountPath: /var/log/grafana
#            name: { { .Values.general.volume_name } }-log
#            mountPath: /var/lib/grafana
#            name: { { .Values.general.volume_name } }-data
#        {{ end }}
#      {{- if eq .Values.general.enable_volume true }}
#      volumes:
#        - name: {{ .Values.general.volume_name }}-config
#          persistentVolumeClaim:
#            claimName: {{ .Values.general.volume_name }}-config-claim
#        - name: { { .Values.general.volume_name } }-log
#          persistentVolumeClaim:
#            claimName: { { .Values.general.volume_name } }-log-claim
#          - name: { { .Values.general.volume_name } }-data
#          persistentVolumeClaim:
#            claimName: { { .Values.general.volume_name } }-data-claim
#      {{ end }}


